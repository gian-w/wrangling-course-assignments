knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
View(data_unique_id_subset)
View(data_unique_id_subset)
View(data_age_gender_subset)
View(data_age_gender_subset)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_selfreport_summary_subset)
View(data_selfreport_summary_subset)
data_amp_summary_subset |>
distinct(unique_id)
data_age_gender_subset |>
distinct(unique_id)
?full_join
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = unique_id,
keep = TRUE)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id),
keep = TRUE)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should add
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id))
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should add
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id),
keep = TRUE)
View(data_combined)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join tries to match all unique_ids and those who do not match in the other data set will just get an NA on that variable, but will retain the value from the data set in which they exist.
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id))
View(data_combined)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations. A full join tries to match all unique_ids and those who do not match in the other data set will just get an NA on that variable, but will retain the value from the data set in which they exist.
data_combined <-
full_join(x = data_amp_summary_subset, # left data set
y = data_age_gender_subset, # right data set
by = join_by(unique_id)) #join by unique_id, so only one column 'unique_id' will be retained in the new data frame, but containing all unique observations from both data sets
#
View(data_selfreport_summary_subset)
View(data_selfreport_summary_subset)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
data_selfreport_summary_subset |>
distinct(unique_id)
data_selfreport_summary_subset |>
count(unique_id)
data_selfreport_summary_subset |>
distinct(unique_id) |>
count()
data_amp_summary_subset |>
distinct(unique_id) |>
count()
data_selfreport_summary_subset |>
distinct(unique_id) |>
count()
data_self_reports_and_their_amp_data <-
full_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
View(data_self_reports_and_their_amp_data)
View(data_self_reports_and_their_amp_data)
data_self_reports_and_their_amp_data <-
left_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
View(data_self_reports_and_their_amp_data)
View(data_self_reports_and_their_amp_data)
data_amp_data_and_their_self_reports <-
right_join(x = data_selfreport_summary_subset,
y= data_amp_summary_subset,
by = join_by(unique_id))
View(data_amp_data_and_their_self_reports)
View(data_amp_data_and_their_self_reports)
?semi_join()
?inner_join
data_combined_2 <-
inner_join(x = data_combined,
y = data_selfreport_summary_subset,
by = join_by(unique_id))
View(data_combined_2)
View(data_combined_2)
# first, create a combined data set with data_age_gender..., data_amp..., and data_selfreport...
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id)) |>
full_join(y = data_selfreport_summary_subset,
by = join_by(unique_id))
View(data_combined_3)
View(data_combined_3)
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
# first, create a combined data set with data_age_gender..., data_amp..., and data_selfreport...
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id)) |> #join age_gender and amp by unique_id...
full_join(y = data_selfreport_summary_subset, #then join the selfreport data to the newly created data frame, which gets piped to the x = argument
by = join_by(unique_id))
?anti_join
data_missing_ids <-
anti_join(x = data_combined_3,
y = data_unique_id_subset,
by = join_by(unique_id))
View(data_missing_ids)
View(data_missing_ids)
data_missing_ids <-
anti_join(x = data_combined_3,
y = data_unique_id_subset,
by = join_by(unique_id)) |>
select(unique_id)
View(data_missing_ids)
View(data_missing_ids)
