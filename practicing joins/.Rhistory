knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
View(data_unique_id_subset)
View(data_unique_id_subset)
View(data_age_gender_subset)
View(data_age_gender_subset)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_selfreport_summary_subset)
View(data_selfreport_summary_subset)
data_amp_summary_subset |>
distinct(unique_id)
data_age_gender_subset |>
distinct(unique_id)
?full_join
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = unique_id,
keep = TRUE)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id),
keep = TRUE)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should add
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id))
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join should add
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id),
keep = TRUE)
View(data_combined)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
View(data_combined)
View(data_combined)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations, so performing a full join tries to match all unique_ids and those who do not match in the other data set will just get an NA on that variable, but will retain the value from the data set in which they exist.
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = join_by(unique_id))
View(data_combined)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations. A full join tries to match all unique_ids and those who do not match in the other data set will just get an NA on that variable, but will retain the value from the data set in which they exist.
data_combined <-
full_join(x = data_amp_summary_subset, # left data set
y = data_age_gender_subset, # right data set
by = join_by(unique_id)) #join by unique_id, so only one column 'unique_id' will be retained in the new data frame, but containing all unique observations from both data sets
#
View(data_selfreport_summary_subset)
View(data_selfreport_summary_subset)
View(data_amp_summary_subset)
View(data_amp_summary_subset)
data_selfreport_summary_subset |>
distinct(unique_id)
data_selfreport_summary_subset |>
count(unique_id)
data_selfreport_summary_subset |>
distinct(unique_id) |>
count()
data_amp_summary_subset |>
distinct(unique_id) |>
count()
data_selfreport_summary_subset |>
distinct(unique_id) |>
count()
data_self_reports_and_their_amp_data <-
full_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
View(data_self_reports_and_their_amp_data)
View(data_self_reports_and_their_amp_data)
data_self_reports_and_their_amp_data <-
left_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
View(data_self_reports_and_their_amp_data)
View(data_self_reports_and_their_amp_data)
data_amp_data_and_their_self_reports <-
right_join(x = data_selfreport_summary_subset,
y= data_amp_summary_subset,
by = join_by(unique_id))
View(data_amp_data_and_their_self_reports)
View(data_amp_data_and_their_self_reports)
?semi_join()
?inner_join
data_combined_2 <-
inner_join(x = data_combined,
y = data_selfreport_summary_subset,
by = join_by(unique_id))
View(data_combined_2)
View(data_combined_2)
# first, create a combined data set with data_age_gender..., data_amp..., and data_selfreport...
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id)) |>
full_join(y = data_selfreport_summary_subset,
by = join_by(unique_id))
View(data_combined_3)
View(data_combined_3)
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
# first, create a combined data set with data_age_gender..., data_amp..., and data_selfreport...
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id)) |> #join age_gender and amp by unique_id...
full_join(y = data_selfreport_summary_subset, #then join the selfreport data to the newly created data frame, which gets piped to the x = argument
by = join_by(unique_id))
?anti_join
data_missing_ids <-
anti_join(x = data_combined_3,
y = data_unique_id_subset,
by = join_by(unique_id))
View(data_missing_ids)
View(data_missing_ids)
data_missing_ids <-
anti_join(x = data_combined_3,
y = data_unique_id_subset,
by = join_by(unique_id)) |>
select(unique_id)
View(data_missing_ids)
View(data_missing_ids)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
# the goal is to keep every row from x and every row from y ('unique_ids in either data frame are retained'). To achieve this, a full_join() is needed. data_age_gender_subset contains 90 observations, data_amp_summary_subset contains 31 observations. A full join tries to match all unique_ids and those who do not match in the other data set will just get an NA on that variable, but will retain the value from the data set in which they exist.
data_combined <-
full_join(x = data_amp_summary_subset, # left data set
y = data_age_gender_subset, # right data set
by = join_by(unique_id)) #join by unique_id, so only one column 'unique_id' will be retained in the new data frame, but containing all unique observations from both data sets
# the new data_combined data frame now has 95 observations, indicating that some observations were unique to the y data set
#to join the two data sets so that all participants have self-report data + AMP data if available, a left_join() by unique_id is needed. left_join() keeps all observations in x and only joins those in y which match with the ones in x. If the participants in the AMP data set (which is the right data set) do not appear in the self-report data, they won't be in the new data frame. All participants from the selfreport_subset will be retained and their AMP data, if available, will be added as a new variable.
data_self_reports_and_their_amp_data <-
left_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = join_by(unique_id))
# the new data frame still contains 76 rows and now 3 variables, which are unique_id, mean_self_report, and mean_reaction_time...
#to join the two data sets so that all participants have AMP data + self-report data if available, a right_joint() by unique_id is needed.To keep it consistent, the larger data set will still be x and the smaller y. right_join() keeps all observations in y and only joins those in x which match with the ones in y. If the participants in the self-report data (which is the left data set) do not appear in the AMP data, they won't be in the new data frame. All participants from the AMP data will be retained and their self-report data, if available, will be added as a new variable.
data_amp_data_and_their_self_reports <-
right_join(x = data_selfreport_summary_subset,
y= data_amp_summary_subset,
by = join_by(unique_id))
# the new data set still contains 31 rows and now 3 variables. note that the first column after unique_id is still the self-report mean, which comes from the left/x data set, even though only the observations from y were retained!
#to join the two data sets and only retain unique_ids already present in data_combined, an inner_join() is needed. inner_join() only keeps observations from x (data_combined) that have a matching key (unique_id) in y (data_selfreport_summary_subset). Only the participants from data_combined which are also present in data_selfreport... are retained.
data_combined_2 <-
inner_join(x = data_combined,
y = data_selfreport_summary_subset,
by = join_by(unique_id))
#the new data frame now contains only 73 observations, so it is likely that 3 observations from the self-report data were not present in the data_combined, therefore they were excluded.
# first, create a combined data set with data_age_gender..., data_amp..., and data_selfreport..., using full_join() to retain all unique_ids in each data set
data_combined_3 <-
full_join(x = data_age_gender_subset,
y = data_amp_summary_subset,
by = join_by(unique_id)) |> #join age_gender and amp by unique_id...
full_join(y = data_selfreport_summary_subset, #then join the selfreport data to the newly created data frame, which gets piped to the x = argument
by = join_by(unique_id))
# now onto the missing ids: data_combined_3 contains 101 observations, whereas data_unique_id_subset contains only 92 observations. Thus, not all unique_ids present in the combined_3 data set appear in the unique_id data set. To check which those are and to retain them in a data frame, an anti_join() is needed. anti_join() drops all rows from x that have a match in y. So in the present case, if we want to list the unique_ids in data_combined_3 that are missing in  data_uniqe_id_subset, x = data_combined_3, and y = data_unique_id_subset -> returns all rows from data_combined without a match in data_unique_id_subset
data_missing_ids <-
anti_join(x = data_combined_3,
y = data_unique_id_subset,
by = join_by(unique_id)) |>
select(unique_id) |>
distinct() # if there are duplicates, just return the unique/distinct observations
# the new data set contains 13 observations which were missing in data_unique_id_subset but were present in data_combined_3
View(data_missing_ids)
View(data_missing_ids)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data?
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
rm(list = ls())
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data?
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
View(data_amp_raw)
View(data_amp_raw)
View(data_amp_raw)
data_amp_performance_criteria <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, rt, block_type) |>
filter(block_type == "test") |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
summarise(fast_trial_percent = mean(fast_trial)*100)
View(data_amp_performance_criteria)
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, rt, block_type) |>
filter(block_type == "test") |>
#mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
mutate(fast_trial = rt < 100)
View(data_amp_performance_criteria)
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, rt, block_type) |>
filter(block_type == "test") |>
#mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
mutate(fast_trial = rt < 100) |>
summarise(fast_trial_percent = mean(fast_trial)*100)
View(data_amp_performance_criteria)
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, rt, block_type) |>
filter(block_type == "test") |>
#mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
mutate(fast_trial = rt < 100) |>
group_by(unique_id) |>
summarise(percent_fast_trial = mean(fast_trial)*100)
View(data_amp_performance_criteria)
View(data_amp_performance_criteria)
data_amp_performance_criteria <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, rt, block_type) |>
filter(block_type == "test") |>
#mutate(fast_trial = rt < 100) |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
group_by(unique_id) |>
summarise(percent_fast_trial = mean(fast_trial)*100) |>
mutate(exclude_amp_performance = ifelse(percent_fast_trial > 10, "exclude", "include"))
View(data_amp_performance_criteria)
View(data_amp_performance_criteria)
